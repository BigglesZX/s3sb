/////////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
//////////////////                                      \\\\\\\\\\\\\\\\\\
///////////                     _.-~^^~-._                     \\\\\\\\\\\
///////                     .-~'   s3sb   '~-.                     \\\\\\\
////                       {  S3 Site Backup  }                       \\\\
//                          \       by       /                          \\
//                           :   BigglesZX  :                           \\
//                           "              "                           \\
//                            *            *                            \\
///                                                                    \\\
// / / / / / / / / / / / / / / / / /  \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \\

// 0x00 . Intro  /////////////////////////////////////////////////////////

Welcome to the s3sb README. This file should, if you're lucky (and if
I've finished writing it), contain everything you need to know to get s3sb
running in your environment.

This file will change along with s3sb itself, as different features are
improved and old behaviours retired. The time I have available to work on
projects like s3sb varies immensely, so I'll try to make sure this file 
stays up to date - even in describing behaviours that will soon be
retired - so that you can use s3sb whatever state it's in.


// 0x01 . What is s3sb?  /////////////////////////////////////////////////

In one sentence, s3sb - S3 Site Backup - is a Bash shell script designed
to back up whole websites - files and database contents - on to Amazon S3.

It allows you to specify a directory where files are located, as well as 
connection details for the database used by that site, and when executed 
it will pack up those files into a .tar.gz file, dump the database into a 
.sql.gz file, then upload both those files to an Amazon S3 account, filing
them neatly into a bucket named after the site. Timestamps are included in
the filenames to help future retrieval. How useful!

s3sb was designed to fulfil a need I had in a shared hosting environment.
Your environment may differ, so I'm trying to ensure that s3sb can cope 
with a variety of hosting scenarios so that it can be as helpful to you as
it is to me. It probably won't be perfect yet, but I'm working on it.

s3sb makes use of the s3-bash library created by Raphael James Cohn 
(http://code.google.com/p/s3-bash/). The library hasn't been updated since
version 0.02 in late 2007, so I have made a few tweaks to the code to 
remedy a few issues. Accordingly, s3sb includes the s3-bash files required
to get the whole thing running. As s3-bash is licensed under Apache 
License 2.0 (http://www.apache.org/licenses/LICENSE-2.0), so is s3sb. See
the LICENSE file for more details.

// 0x02 . Prerequisites  /////////////////////////////////////////////////

s3sb is designed to be run from shell or crontab, so you'll need a UNIX-
like environment in which to do that. s3sb should run without issue on Mac
OS X, but this hasn't been tested as much as Linux. Windows (Cygwin) has 
not been tested at all. You're welcome to submit patches to address any 
OS-specific deficiency.

The heart of s3sb's functionality is of course its interfacing with Amazon
S3. So you'll need an Amazon Web Services (AWS) account, first and 
foremost. Once you've initialised S3 on your AWS account, you'll need your
"key" and "secret key" strings in order to allow s3sb access to your S3 
account. Instructions for setting up your key and secret keys in the s3sb 
config files are provided in the Installation and Configuration section.

Since s3sb includes the s3-bash library, you will also need to satisfy the
dependencies of that library. They are GNU coreutils, curl and openssl.
Please see the documentation for your system for instructions on getting 
those packages installed (you've probably got them installed already, 
however, if you're using any recent version of a Linux distribution).

As previously mentioned, I've tweaked the bundled version of s3-bash to 
fix a few issues that were present in the stock code. Please see the 
s3-bash Issues page on Google Code 
(http://code.google.com/p/s3-bash/issues/list) for full details on the 
bugs. The fixes are:

  > Issues #6 and #11
  A bug in the way headers were signed, fixed thanks to the patch provided
  by batlogg on Issue #11.

  > Issue #7
  A URL-forming bug preventing the use of European S3 buckets, fixed 
  thanks to the patch provided by jon.keys

  > Issue #17
  URLencode entities (e.g. %20) in filenames would break put operations. 
  Fixed thanks to the suggestion in the Issue comments from "admin".

Feel free to use the code from my updated s3-bash files to patch your own 
s3-bash installation. The Google Code project for s3-bash has seen very 
little activity since the 0.02 release in 2007 so it's unlikely that 
official updates will be forthcoming any time soon. If there are any 
updates in the future I'll try and merge them into s3sb where appropriate.


// 0x03 . Installation and Configuration  ////////////////////////////////

Installation of s3sb is pretty simple - just clone the git repos or 
grab the files by more manual means. Stick them in a sensibly named 
directory on the machine from which you wish to make your backups. You 
could call it "s3sb", "s3sitebackup", or even "awesomebackuptool". The 
choice is yours.

Once the files are in place, you'll probably need to make the main s3sb 
script executable. In most UNIX-like environments, this can be 
accomplished with the following command (substitute the name of your s3sb
directory from the previous step):

  $ cd awesomebackuptool/
  $ chmod u+x s3sb

Note that (as with all command-line examples in this README) the $ 
indicates your shell prompt, and should not be typed :).

The next step is to configure your AWS key and secret key. At the moment 
these are stored in two text files in the lib/ directory.

Note: for reasons I won't go into here, the files containing your key and 
secret key must be exactly the right length - the key file must be 20 
bytes and the secret key file 40 bytes. What I've found usually happens is
that most text editors append a newline to the end of your file when 
editing, creating a horrid undesirable extra byte. Oh noes!

Thankfully, avoiding this is easy. Browse to the lib/ directory in your 
s3sb installation, copy your AWS key (not secret key) to the clipboard, 
and do the following:

  $ echo -n "<paste your key>" > key.txt

Ignore the <angle brackets>, but keep the double quotes! This will create
key.txt, containing your AWS key and no trailing newline, phew.

Creating your secret key file is a very similar process - copy your AWS 
secret key to the clipboard, then do:

  $ echo -n "<paste your secret key>" > skey.txt

Once again, ignore the angle brackets, but keep the double quotes.

Now, MOST IMPORTANTLY, if you're installing s3sb in a shared environment 
(e.g. a server on which there are users besides yourself), you MUST change
the permissions on the key and secret key files so that they're readable 
only by your user. In fact, it's good practice to do this even if there 
aren't any other users on your server, as it's possible there will be in 
the future and you can bet you won't remember that your secret key file 
is world readable. So, back in the lib/ directory, run the following 
command:

  $ chmod 600 key.txt skey.txt

This will reset the permissions on your key files so they are only 
readable by your user. Nobody else will be able to view their contents.

You can check the permissions were applied correctly by running (in lib/):

  $ ls -lash *key.txt

You should see something like this:

  0 -rw-------  1 youruser yourgroup 20 2009-05-31 05:02 key.txt
  0 -rw-------  1 youruser yourgroup 40 2009-05-31 03:14 skey.txt

The permission settings appear in the second column. Yours should look
exactly like this. If you're in any doubt here, please consult your 
operating system documentation.

Incidentally, the reason we use files to store your keys and don't just 
specify them on the command line is because anything passed as an argument
to a command can be viewed by other users on the system (in "ps", for 
example). And we don't want anyone getting hold of your S3 keys for 
obvious reasons.


// 0x04 . Usage  /////////////////////////////////////////////////////////

// 0x05 . Known Issues  //////////////////////////////////////////////////

// 0x06 . Roadmap  ///////////////////////////////////////////////////////


// EOF ///////////////////////////////////////////////////////////////////